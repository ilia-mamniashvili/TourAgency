// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace Repositories.Migrations.TourAgency
{
    [DbContext(typeof(TourAgencyDbContext))]
    partial class TourAgencyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DTO.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ComplexProperty<Dictionary<string, object>>("Status", "DTO.City.Status#EntityStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("UpdateDate")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DTO.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Flag")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ComplexProperty<Dictionary<string, object>>("Status", "DTO.Country.Status#EntityStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("UpdateDate")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DTO.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<decimal>("DailyPrice")
                        .HasColumnType("smallmoney");

                    b.Property<bool>("IncludesMeal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Star")
                        .HasColumnType("tinyint");

                    b.ComplexProperty<Dictionary<string, object>>("Status", "DTO.Hotel.Status#EntityStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("UpdateDate")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("DTO.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ComplexProperty<Dictionary<string, object>>("Status", "DTO.Service.Status#EntityStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("UpdateDate")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DTO.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("char(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.ComplexProperty<Dictionary<string, object>>("Status", "DTO.Tour.Status#EntityStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("UpdateDate")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("DTO.TourBooking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("TouristId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("TouristId");

                    b.ToTable("TourBookings");
                });

            modelBuilder.Entity("DTO.TourItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<byte>("OrderPosition")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Status", "DTO.TourItem.Status#EntityStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("UpdateDate")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("HotelId");

                    b.HasIndex("TourId");

                    b.ToTable("TourItems");
                });

            modelBuilder.Entity("DTO.Tourist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("char(11)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.ComplexProperty<Dictionary<string, object>>("Status", "DTO.Tourist.Status#EntityStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("CreateDate")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("UpdateDate")
                                .HasColumnType("datetime2");
                        });

                    b.HasKey("Id");

                    b.ToTable("Tourists");
                });

            modelBuilder.Entity("HotelService", b =>
                {
                    b.Property<int>("AdditionalServicesId")
                        .HasColumnType("int");

                    b.Property<int>("HotelsId")
                        .HasColumnType("int");

                    b.HasKey("AdditionalServicesId", "HotelsId");

                    b.HasIndex("HotelsId");

                    b.ToTable("HotelService");
                });

            modelBuilder.Entity("DTO.City", b =>
                {
                    b.HasOne("DTO.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DTO.Hotel", b =>
                {
                    b.HasOne("DTO.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DTO.TourBooking", b =>
                {
                    b.HasOne("DTO.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTO.Tourist", "Tourist")
                        .WithMany("TourHistory")
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("DTO.TourItem", b =>
                {
                    b.HasOne("DTO.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTO.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId");

                    b.HasOne("DTO.Tour", "Tour")
                        .WithMany("Cities")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Hotel");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HotelService", b =>
                {
                    b.HasOne("DTO.Service", null)
                        .WithMany()
                        .HasForeignKey("AdditionalServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTO.Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DTO.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("DTO.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DTO.Tour", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DTO.Tourist", b =>
                {
                    b.Navigation("TourHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
